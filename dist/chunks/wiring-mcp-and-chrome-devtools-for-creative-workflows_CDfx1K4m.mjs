import { c as createComponent, m as maybeRenderHead, u as unescapeHTML, a as renderTemplate } from './astro/server_BnWXTheT.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Some days feel like lifting a heavy door off its hinges; today was one. I set up MCP in Codex CLI, brought the Chrome DevTools MCP online, and glued together small n8n flows so the “busywork” parts of creating show up with less weight.</p>\n<h2 id=\"why-i-did-this\">Why I did this</h2>\n<p>I’m studying interaction design (BJTU × Lancaster) and building a practice around creative systems. My notes, videos, and posts move faster when the tools hum in the background.</p>\n<h2 id=\"what-clicked-today\">What clicked today</h2>\n<ul>\n<li>MCP in Codex CLI: once providers are configured, Codex reaches local/remote tools through stable interfaces. Less context juggling, more doing.</li>\n<li>Chrome DevTools MCP: terminal control over the browser makes repeatable checks feel like second nature.</li>\n<li>n8n helpers: a tiny flow for X posts; another that funnels videos into a notes workspace for quick summaries.</li>\n<li>A small win: I wrapped a video assignment (ScreenStudio + CapCut) and actually felt good about the pace.</li>\n</ul>\n<h2 id=\"notes-to-future-me\">Notes to future me</h2>\n<ul>\n<li>Write prompts like function contracts. They’re living APIs, not one‑offs.</li>\n<li>Use the tool that’s still moving. DevTools MCP beats older browser automation now.</li>\n<li>When click paths matter, learn from short videos; they carry the “feel” that docs miss.</li>\n</ul>\n<h3 id=\"pointers\">Pointers</h3>\n<ul>\n<li>Chrome DevTools MCP: <a href=\"https://github.com/ChromeDevTools/chrome-devtools-mcp\">https://github.com/ChromeDevTools/chrome-devtools-mcp</a></li>\n<li>Context/Docs MCPs are great for pulling current docs when coding.</li>\n</ul>\n<h2 id=\"tiny-automations-shipped\">Tiny automations shipped</h2>\n<ul>\n<li>X posting: templates + schedule in n8n.</li>\n<li>Research capture: auto‑download → summarize in NotebookLM (or similar) → stash for review.</li>\n</ul>\n<h2 id=\"what-worked\">What worked</h2>\n<ol>\n<li>Plan the day with clear blocks; make tasks smaller than they feel.</li>\n<li>A short nap resets the afternoon.</li>\n<li>Stack little wins; they add up.</li>\n</ol>\n<h2 id=\"could-be-better\">Could be better</h2>\n<ul>\n<li>Proxy rules need trimming; not every site needs it.</li>\n<li>A small VPS would remove the friction I keep hitting on free tiers.</li>\n</ul>\n<h2 id=\"next\">Next</h2>\n<ul>\n<li>Expand DevTools MCP scripts for QA/data collection.</li>\n<li>Formalize an “Agent IDE” where the terminal chat and a code model work in parallel.</li>\n<li>Keep the diary → summary → publish loop alive.</li>\n</ul>";

				const frontmatter = {"title":"Wiring MCP and Chrome DevTools for Creative Workflows","description":"High‑leverage setup day: I connected MCP in Codex CLI, brought the Chrome DevTools MCP online, and stitched small automations with n8n so daily creative work feels lighter and faster.","type":"Field note","date":"2025-10-21T00:00:00.000Z","summary":"Wired MCP + Chrome DevTools in Codex, automated X posting and research capture with n8n, and noted a few rules for choosing tools without overthinking.","tags":["mcp","chrome-devtools","n8n","productivity","workflow"]};
				const file = "/Users/kateiso_cao/Desktop/test/kateiso-site/src/content/posts/wiring-mcp-and-chrome-devtools-for-creative-workflows.md";
				const url = undefined;
				function rawContent() {
					return "\nSome days feel like lifting a heavy door off its hinges; today was one. I set up MCP in Codex CLI, brought the Chrome DevTools MCP online, and glued together small n8n flows so the “busywork” parts of creating show up with less weight.\n\n## Why I did this\n\nI’m studying interaction design (BJTU × Lancaster) and building a practice around creative systems. My notes, videos, and posts move faster when the tools hum in the background.\n\n## What clicked today\n\n- MCP in Codex CLI: once providers are configured, Codex reaches local/remote tools through stable interfaces. Less context juggling, more doing.\n- Chrome DevTools MCP: terminal control over the browser makes repeatable checks feel like second nature.\n- n8n helpers: a tiny flow for X posts; another that funnels videos into a notes workspace for quick summaries.\n- A small win: I wrapped a video assignment (ScreenStudio + CapCut) and actually felt good about the pace.\n\n## Notes to future me\n\n- Write prompts like function contracts. They’re living APIs, not one‑offs.\n- Use the tool that’s still moving. DevTools MCP beats older browser automation now.\n- When click paths matter, learn from short videos; they carry the “feel” that docs miss.\n\n### Pointers\n\n- Chrome DevTools MCP: https://github.com/ChromeDevTools/chrome-devtools-mcp\n- Context/Docs MCPs are great for pulling current docs when coding.\n\n## Tiny automations shipped\n\n- X posting: templates + schedule in n8n.\n- Research capture: auto‑download → summarize in NotebookLM (or similar) → stash for review.\n\n## What worked\n\n1) Plan the day with clear blocks; make tasks smaller than they feel.\n2) A short nap resets the afternoon.\n3) Stack little wins; they add up.\n\n## Could be better\n\n- Proxy rules need trimming; not every site needs it.\n- A small VPS would remove the friction I keep hitting on free tiers.\n\n## Next\n\n- Expand DevTools MCP scripts for QA/data collection.\n- Formalize an “Agent IDE” where the terminal chat and a code model work in parallel.\n- Keep the diary → summary → publish loop alive.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"why-i-did-this","text":"Why I did this"},{"depth":2,"slug":"what-clicked-today","text":"What clicked today"},{"depth":2,"slug":"notes-to-future-me","text":"Notes to future me"},{"depth":3,"slug":"pointers","text":"Pointers"},{"depth":2,"slug":"tiny-automations-shipped","text":"Tiny automations shipped"},{"depth":2,"slug":"what-worked","text":"What worked"},{"depth":2,"slug":"could-be-better","text":"Could be better"},{"depth":2,"slug":"next","text":"Next"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
